***** Message format *****

_ Source ID : 1 byte
_ Destination ID : 1 byte
_ Message Type : 1 byte
_ Length : 1 byte
_ Payload : vector clock for application messages
Format of payload: "C0-C1-C2- ... -CN"?

***** PARSING INFORMATION *****


_ Neighbors are implement as an array of structs of type Neighbor that contains the neighbor node id, 
its listenPort and its hostname. The parsing code should fill the array with the correct information.

typedef struct Neighbor {
    int id;
    int port;
    char hostname[100];
} Neighbor;

Neighbor* neighbors = malloc(nb_neighbors * sizeof(Neighbor));

_ The node parameters to be filled during parsing are implemented as follow:

// Global parameters
int nb_nodes;
int min_per_active, max_per_active;
int min_send_delay;
int snapshot_delay;
int max_number;

// Node parameters
int node_id;
int port;

_ Your parsing code should eventually be merged in the /* Parsing of parameters */ section

***** COMMUNICATION CHANNEL INFORMATION *****

_ Each node creates a client socket for each neighbor and connects to them. Client sockets are used to send messages
to neighboring nodes.

_ Each node creates a server socket that listens to all the neighbors client sockets. A thread is created for each
neighbor so that the node can concurrently receive messages from its neighbors. We should create a global message
queue where each threads stores messages received. The queue access should be protected by mutual exclusion

***** MAP Protocol *****
_ MAP should be implemented in a different C file (map.c / map.h). 


***** Termination detection *****.
_ MAP should be implemented in a different C file (termination.c / termination.h). 
